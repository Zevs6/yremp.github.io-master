{"meta":{"title":"yremp","subtitle":null,"description":"春风明月不如你","author":"yremp","url":""},"pages":[{"title":"comment","date":"2018-12-20T15:13:48.000Z","updated":"2019-05-16T14:39:12.000Z","comments":true,"path":"comment/index.html","permalink":"/comment/index.html","excerpt":"","text":"念两句诗 叙别梦、扬州一觉。 【宋代】吴文英《夜游宫·人去西楼雁杳》","keywords":"留言板"},{"title":"bangumi","date":"2019-02-10T13:32:48.000Z","updated":"2019-05-21T16:02:10.000Z","comments":false,"path":"bangumi/index.html","permalink":"/bangumi/index.html","excerpt":"","text":"","keywords":null},{"title":"theme-sakura","date":"2019-01-04T14:53:25.000Z","updated":"2019-05-21T15:57:50.000Z","comments":false,"path":"theme-sakura/index.html","permalink":"/theme-sakura/index.html","excerpt":"","text":"Hexo主题Sakura修改自WordPress主题Sakura，感谢原作者Mashiro","keywords":"Hexo 主题 Sakura 🌸"},{"title":"tags","date":"2018-12-12T14:14:16.000Z","updated":"2019-05-16T14:39:12.000Z","comments":true,"path":"tags/index.html","permalink":"/tags/index.html","excerpt":"","text":""},{"title":"music","date":"2018-12-20T15:14:28.000Z","updated":"2019-05-21T15:16:04.000Z","comments":false,"path":"music/index.html","permalink":"/music/index.html","excerpt":"","text":"","keywords":"喜欢的音乐"},{"title":"links","date":"2018-12-19T15:11:06.000Z","updated":"2019-05-21T16:40:06.000Z","comments":true,"path":"links/index.html","permalink":"/links/index.html","excerpt":"","text":"","keywords":"友人帐"},{"title":"video","date":"2018-12-20T15:14:38.000Z","updated":"2019-05-16T14:39:12.000Z","comments":false,"path":"video/index.html","permalink":"/video/index.html","excerpt":"","text":"var videos = [ { img: 'https://lain.bgm.tv/pic/cover/l/0e/1e/218971_2y351.jpg', title: '朝花夕誓——于离别之朝束起约定之花', status: '已追完', progress: 100, jp: 'さよならの朝に約束の花をかざろう', time: '放送时间: 2018-02-24 SUN.', desc: ' 住在远离尘嚣的土地，一边将每天的事情编织成名为希比欧的布，一边静静生活的伊欧夫人民。在15岁左右外表就停止成长，拥有数百年寿命的他们，被称为“离别的一族”，并被视为活着的传说。没有双亲的伊欧夫少女玛奇亚，过着被伙伴包围的平稳日子，却总感觉“孤身一人”。他们的这种日常，一瞬间就崩溃消失。追求伊欧夫的长寿之血，梅萨蒂军乘坐着名为雷纳特的古代兽发动了进攻。在绝望与混乱之中，伊欧夫的第一美女蕾莉亚被梅萨蒂带走，而玛奇亚暗恋的少年克里姆也失踪了。玛奇亚虽然总算逃脱了，却失去了伙伴和归去之地……。' }, { img : 'https://lain.bgm.tv/pic/cover/l/0e/1e/218971_2y351.jpg', title: '朝花夕誓——于离别之朝束起约定之花', status: '已追完', progress: 100, jp: 'さよならの朝に約束の花をかざろう', time: '2018-02-24 SUN.', desc: ' 住在远离尘嚣的土地，一边将每天的事情编织成名为希比欧的布，一边静静生活的伊欧夫人民。在15岁左右外表就停止成长，拥有数百年寿命的他们，被称为“离别的一族”，并被视为活着的传说。没有双亲的伊欧夫少女玛奇亚，过着被伙伴包围的平稳日子，却总感觉“孤身一人”。他们的这种日常，一瞬间就崩溃消失。追求伊欧夫的长寿之血，梅萨蒂军乘坐着名为雷纳特的古代兽发动了进攻。在绝望与混乱之中，伊欧夫的第一美女蕾莉亚被梅萨蒂带走，而玛奇亚暗恋的少年克里姆也失踪了。玛奇亚虽然总算逃脱了，却失去了伙伴和归去之地……。' } ] .should-ellipsis{overflow:hidden;text-overflow:ellipsis;white-space:nowrap;width:95%;}.should-ellipsis-full{overflow:hidden;text-overflow:ellipsis;white-space:nowrap;width:100%;}.should-ellipsis i{position:absolute;right:24px;}.grey-text{color:#9e9e9e !important}.grey-text.text-darken-4{color:#212121 !important}html{line-height:1.15;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}body{margin:0}img{border-style:none}progress{display:inline-block;vertical-align:baseline}::-webkit-file-upload-button{-webkit-appearance:button;font:inherit}html{-webkit-box-sizing:border-box;box-sizing:border-box}*,*:before,*:after{-webkit-box-sizing:inherit;box-sizing:inherit}ul:not(.browser-default){padding-left:0;list-style-type:none}ul:not(.browser-default)>li{list-style-type:none}.card{-webkit-box-shadow:0 2px 2px 0 rgba(0,0,0,0.14),0 3px 1px -2px rgba(0,0,0,0.12),0 1px 5px 0 rgba(0,0,0,0.2);box-shadow:0 2px 2px 0 rgba(0,0,0,0.14),0 3px 1px -2px rgba(0,0,0,0.12),0 1px 5px 0 rgba(0,0,0,0.2)}.hoverable{-webkit-transition:-webkit-box-shadow .25s;transition:-webkit-box-shadow .25s;transition:box-shadow .25s;transition:box-shadow .25s,-webkit-box-shadow .25s}.hoverable:hover{-webkit-box-shadow:0 8px 17px 0 rgba(0,0,0,0.2),0 6px 20px 0 rgba(0,0,0,0.19);box-shadow:0 8px 17px 0 rgba(0,0,0,0.2),0 6px 20px 0 rgba(0,0,0,0.19)}i{line-height:inherit}i.right{float:right;margin-left:15px}.bangumi .right{float:right !important}.material-icons{text-rendering:optimizeLegibility;-webkit-font-feature-settings:'liga';-moz-font-feature-settings:'liga';font-feature-settings:'liga'}.row{margin-left:auto;margin-right:auto;margin-bottom:20px}.row:after{content:\"\";display:table;clear:both}.row .col{float:left;-webkit-box-sizing:border-box;box-sizing:border-box;padding:0 .75rem;min-height:1px}.row .col.s12{width:100%;margin-left:auto;left:auto;right:auto}@media only screen and (min-width:601px){.row .col.m6{width:50%;margin-left:auto;left:auto;right:auto}}html{line-height:1.5;font-family:-apple-system,BlinkMacSystemFont,\"Segoe UI\",Roboto,Oxygen-Sans,Ubuntu,Cantarell,\"Helvetica Neue\",sans-serif;font-weight:normal;color:rgba(0,0,0,0.87)}@media only screen and (min-width:0){html{font-size:14px}}@media only screen and (min-width:992px){html{font-size:14.5px}}@media only screen and (min-width:1200px){html{font-size:15px}}.card{position:relative;margin:.5rem 0 1rem 0;background-color:#fff;-webkit-transition:-webkit-box-shadow .25s;transition:-webkit-box-shadow .25s;transition:box-shadow .25s;transition:box-shadow .25s,-webkit-box-shadow .25s;border-radius:2px}.card .card-title{font-size:24px;font-weight:300}.card .card-title.activator{cursor:pointer}.card .card-image{position:relative}.card .card-image img{display:block;border-radius:2px 2px 0 0;position:relative;left:0;right:0;top:0;bottom:0;width:100%}.card .card-content{padding:24px;border-radius:0 0 2px 2px}.card .card-content p{margin:0}.card .card-content .card-title{display:block;line-height:32px;margin-bottom:8px}.card .card-content .card-title i{line-height:32px}.card .card-reveal{padding:24px;position:absolute;background-color:#fff;width:100%;overflow-y:auto;left:0;top:100%;height:100%;z-index:3;display:none}.card .card-reveal .card-title{cursor:pointer;display:block}.waves-effect{position:relative;cursor:pointer;display:inline-block;overflow:hidden;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;-webkit-tap-highlight-color:transparent;vertical-align:middle;z-index:1;-webkit-transition:.3s ease-out;transition:.3s ease-out}.waves-effect img{position:relative;z-index:-1}.waves-block{display:block}::-webkit-input-placeholder{color:#d1d1d1}::-moz-placeholder{color:#d1d1d1}:-ms-input-placeholder{color:#d1d1d1}::-ms-input-placeholder{color:#d1d1d1}[type=\"radio\"]:not(:checked){position:absolute;opacity:0;pointer-events:none}[type=\"radio\"]:not(:checked)+span{position:relative;padding-left:35px;cursor:pointer;display:inline-block;height:25px;line-height:25px;font-size:1rem;-webkit-transition:.28s ease;transition:.28s ease;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}[type=\"radio\"]:not(:checked)+span:before,[type=\"radio\"]:not(:checked)+span:after{border-radius:50%}[type=\"radio\"]:not(:checked)+span:before,[type=\"radio\"]:not(:checked)+span:after{border:2px solid #5a5a5a}[type=\"radio\"]:not(:checked)+span:after{-webkit-transform:scale(0);transform:scale(0)}[type=\"checkbox\"]:not(:checked){position:absolute;opacity:0;pointer-events:none}[type=\"checkbox\"]:not(:checked):disabled+span:not(.lever):before{border:none;background-color:rgba(0,0,0,0.42)}[type=\"checkbox\"].filled-in:not(:checked)+span:not(.lever):before{width:0;height:0;border:3px solid transparent;left:6px;top:10px;-webkit-transform:rotateZ(37deg);transform:rotateZ(37deg);-webkit-transform-origin:100% 100%;transform-origin:100% 100%}[type=\"checkbox\"].filled-in:not(:checked)+span:not(.lever):after{height:20px;width:20px;background-color:transparent;border:2px solid #5a5a5a;top:0px;z-index:0}input[type=checkbox]:not(:disabled) ~ .lever:active:before,input[type=checkbox]:not(:disabled).tabbed:focus ~ .lever::before{-webkit-transform:scale(2.4);transform:scale(2.4);background-color:rgba(0,0,0,0.08)}input[type=range].focused:focus:not(.active)::-webkit-slider-thumb{-webkit-box-shadow:0 0 0 10px rgba(38,166,154,0.26);box-shadow:0 0 0 10px rgba(38,166,154,0.26)}input[type=range].focused:focus:not(.active)::-moz-range-thumb{box-shadow:0 0 0 10px rgba(38,166,154,0.26)}input[type=range].focused:focus:not(.active)::-ms-thumb{box-shadow:0 0 0 10px rgba(38,166,154,0.26)} 番组计划 这里将是永远的回忆 window.onload = function(){ videos.forEach(function(video, i){ $('#rootRow').append(` ${video.title} ${video.jp} ${video.status} ${video.title} ${video.jp} 放送时间: ${video.time} ${video.desc} ${video.status} `) }) }","keywords":"B站"}],"posts":[{"title":"最近搭了一个图床","slug":"images","date":"2019-08-12T02:16:01.000Z","updated":"2019-08-12T03:45:46.416Z","comments":true,"path":"2019/08/12/images/","link":"","permalink":"/2019/08/12/images/","excerpt":"","text":"最近搭了一个图床，欢迎大家使用这是一个基于免费版的Chevereto搭建的图床，有兴趣的可以直接去看Chevereto-Free，不建议大家使用 Chevereto的破解版，风险比较大。免费版已经很强大了，大部分功能都能正常使用。 图床地址：https://www.yremp.live 图床对我们写博客解决插图是有很大帮组的，之前玩hexo时图片放github加载速度是比较慢的，后来使用jsdelivr加速会好一点，但是还是不够理想。所以很长一段时间我都在思考，如何搭建一个自己的图床，后来无意间发现了 Chevereto-Free ，发现这个程序很适合我，于是去网上找了很多教程，花费了一天时间把网站重构了一下，顺利搭建了我的图床。 ]","categories":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}],"tags":[{"name":"web","slug":"web","permalink":"/tags/web/"}],"keywords":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}]},{"title":"Spring Boot 社区项目","slug":"spring-boot-community","date":"2019-08-06T10:16:01.000Z","updated":"2019-08-12T03:45:20.442Z","comments":true,"path":"2019/08/06/spring-boot-community/","link":"","permalink":"/2019/08/06/spring-boot-community/","excerpt":"","text":"1.图片预览：1.主页 2.帖子详情 3.回复和评论 4.个人资料 公共资料面板 个人资料的前端页面还有很大修改的空间2.项目地址： 话不多说，先给出项目地址。 Github 地址在线预览地址 3.项目核心： 接入github，使用户可以直接使用github账号登录。集成editormd插件，实现markdown语法编辑并显示为html。在editormd中使用ucloud上传图片。数据库查询分页。使用ajax提交请求，实现二级评论的加载。 4.核心代码 1.Github登录相关 1.编写AccessTokenDTO.class 用于github access_token private String client_id; private String client_secret; private String code; private String redirect_uri; private String state; public String getClient_id() { return client_id; } public void setClient_id(String client_id) { this.client_id = client_id; } public String getClient_secret() { return client_secret; } public void setClient_secret(String client_secret) { this.client_secret = client_secret; } public String getCode() { return code; } public void setCode(String code) { this.code = code; } public String getRedirect_uri() { return redirect_uri; } public void setRedirect_uri(String redirect_uri) { this.redirect_uri = redirect_uri; } public String getState() { return state; } public void setState(String state) { this.state = state; } } 2.编写GithubProvider.class:调用github官方给出的 OAuth Apps api，实现Github登录 @Component public class GithubProvider { public String getAccessToken(AccessTokenDTO accessTokenDto){ MediaType mediaType = MediaType.get(&quot;application/json; charset=utf-8&quot;); OkHttpClient client = new OkHttpClient(); RequestBody body = RequestBody.create(mediaType,JSON.toJSONString(accessTokenDto)); Request request = new Request.Builder() .url(&quot;https://github.com/login/oauth/access_token&quot;) .post(body) .build(); try (Response response = client.newCall(request).execute()) { String string =response.body().string(); String access_token=string.split(&quot;&amp;amp;&quot;)[0].split(&quot;=&quot;)[1]; return access_token; }catch (Exception e) { e.printStackTrace(); } return null; } public GithubUserDTO getGithubUser(String accessToken) { OkHttpClient client = new OkHttpClient(); Request request = new Request.Builder() .url(&quot;https://api.github.com/user?access_token=&quot; + accessToken) .build(); try { Response response = client.newCall(request).execute(); String string = response.body().string(); GithubUserDTO githubUserDTO = JSON.parseObject(string, GithubUserDTO.class); return githubUserDTO; } catch (IOException e) { return null; } } } Controller中调用GithubProvider获取用户数据并写入数据库 @Controller public class AuthorizeController { @Autowired private GithubProvider githubProvider = null; @Autowired private UserService userService = null; @Value(&quot;${github.client.id}&quot;) private String clientID; @Value(&quot;${github.client.secret}&quot;) private String clientSC; @Value(&quot;${github.redirect.url}&quot;) private String redirectURL; @Autowired QuesDtoService quesDtoService; @RequestMapping(&quot;/callback&quot;) public String callback(@RequestParam(name = &quot;code&quot;) String code, @RequestParam(name = &quot;state&quot;) String state, HttpServletResponse response, HttpServletRequest request) { AccessTokenDTO accessTokenDto = new AccessTokenDTO(); accessTokenDto.setCode(code); accessTokenDto.setState(state); accessTokenDto.setClient_id(clientID); accessTokenDto.setClient_secret(clientSC); accessTokenDto.setRedirect_uri(redirectURL); String accesstaken = githubProvider.getAccessToken(accessTokenDto); GithubUserDTO githubUserDTO = githubProvider.getGithubUser(accesstaken); if (githubUserDTO != null) { User user1 = null; String token = UUID.randomUUID().toString(); try { user1 = userService.findByGithubId(String.valueOf(githubUserDTO.getId())); if (user1 != null) { response.addCookie(new Cookie(&quot;token&quot;, token)); user1.setUser_token(token); userService.upTokenById(token, user1.getUser_id()); } else { User user = new User(); user.setUser_token(token); user.setUser_name(githubUserDTO.getName()); user.setAccount_id(String.valueOf(githubUserDTO.getId())); user.setGmt_create(System.currentTimeMillis()); user.setGmt_modified(user.getGmt_create()); user.setUser_img(githubUserDTO.getAvatarUrl()); user.setUser_bio(githubUserDTO.getBio()); user.setUser_blog(githubUserDTO.getBlog()); user.setUser_github(githubUserDTO.getHtml_url()); userService.Insert(user); request.getSession().setAttribute(&quot;user&quot;, user); response.addCookie(new Cookie(&quot;token&quot;, token)); } } catch (Exception w) { } return &quot;redirect:/&quot;; } else { return &quot;redirect:/&quot;; } } 2.Ucloud 对象存储 UFile 1.UcloudProvider.class: //ucloud上传文件 @Service public class UcloudProvider { private String buckname = &quot;yremp&quot;; @Value(&quot;${ucloud.publickey}&quot;) private String publickey; @Value(&quot;${ucloud.privatekey}&quot;) private String privatekey; public String upload(InputStream fileStream, String mimeType, String filename) { String fileName; String[] FilleName = filename.split(&quot;\\\\.&quot;); if (FilleName.length &gt; 1) { fileName = UUID.randomUUID().toString() + &quot;.&quot; + FilleName[FilleName.length - 1]; } else { return null; } try { // 授权 ObjectAuthorization OBJECT_AUTHORIZER = new UfileObjectLocalAuthorization(publickey, privatekey); // 配置 ObjectConfig config = new ObjectConfig(&quot;hk&quot;, &quot;ufileos.com&quot;); PutObjectResultBean response = UfileClient.object(OBJECT_AUTHORIZER, config) .putObject(fileStream, mimeType) .nameAs(fileName) .toBucket(buckname) .setOnProgressListener(new OnProgressListener() { @Override public void onProgress(long bytesWritten, long contentLength) { } }) .execute(); if (response != null &amp;amp;&amp;amp; response.getRetCode() == 0) { String url = UfileClient.object(OBJECT_AUTHORIZER, config) .getDownloadUrlFromPrivateBucket(fileName, buckname, 24 * 60 * 60 * 365 *10) .createUrl(); return url; } else { throw new PeculiarException(PeculiarExceptionCodeAndMessage.FILE_UPLOAD_ERROR); } } catch (UfileClientException e) { throw new PeculiarException(PeculiarExceptionCodeAndMessage.FILE_UPLOAD_ERROR); } catch (UfileServerException e) { throw new PeculiarException(PeculiarExceptionCodeAndMessage.FILE_UPLOAD_ERROR); } } } 2.前端请求后调用UcloudProvider @Controller public class FileUploadController { private String fileurl; @Autowired private UcloudProvider ucloudProvider; @RequestMapping(&quot;/file/upload&quot;) @ResponseBody public FileDTO upload(HttpServletRequest request){ MultipartHttpServletRequest multipartHttpServletRequest=(MultipartHttpServletRequest) request; MultipartFile file = multipartHttpServletRequest.getFile(&quot;editormd-image-file&quot;); try { //ucloudProvider 拿到文件url String fileurl= ucloudProvider.upload(file.getInputStream(),file.getContentType(),file.getOriginalFilename()); FileDTO fileDTO = new FileDTO(); fileDTO.setSuccess(1); fileDTO.setMessage(&quot;成功&quot;); fileDTO.setUrl(fileurl); return fileDTO; } catch (Exception e) { e.printStackTrace(); } FileDTO fileDTO = new FileDTO(); fileDTO.setSuccess(1); fileDTO.setMessage(&quot;成功&quot;); fileDTO.setUrl(fileurl); return fileDTO; } } 3.其他 至于集成editormd、数据库分页、和ajax 的简单使用感觉比较简单，教程也很多就不细说。","categories":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}],"tags":[{"name":"web","slug":"web","permalink":"/tags/web/"},{"name":"Spring Boot","slug":"Spring-Boot","permalink":"/tags/Spring-Boot/"}],"keywords":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}]},{"title":"Spring Boot 文件上传","slug":"spring-boot-fileupload","date":"2019-07-26T10:16:01.000Z","updated":"2019-08-08T12:59:11.867Z","comments":true,"path":"2019/07/26/spring-boot-fileupload/","link":"","permalink":"/2019/07/26/spring-boot-fileupload/","excerpt":"","text":"在Spring Boot 项目中如何上传文件，今天在这里分享一下。 Step 1：前端准备： fileupload.html,一个简单的表单： &lt;!DOCTYPE html&gt;&lt;html lang=”en”&gt;&lt;head&gt; &lt;meta charset=”UTF-8”&gt; &lt;title&gt;Title&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;form action=”/upload” method=”post” enctype=”multipart/form-data”&gt; &lt;input type=”file” id=”photo” name=”photo”&gt; &lt;input type=”submit”&gt;&lt;/form&gt;&lt;/body&gt;&lt;/html&gt; Step2：application.properties配置 application.properties配置文件中如下配置： #临时目录文件夹spring.servlet.multipart.location=f:/temp/ #自定义文件保存目录app.upload.path=f:upload/ #单个文件上传最大大小spring.servlet.multipart.max-file-size=10MB #单个请求最大上传大小spring.servlet.multipart.max-request-size=50MB Step 3：后台Controller： @Controller public class FileUploadController { // 返回文件上传界面 @RequestMapping(&quot;/&quot;) public String index(){ return &quot;fileupload&quot;; } // 使用配置文件中自定义文件保存路径 @Value(&quot;${app.upload.path}&quot;) private String path=null; @PostMapping(&quot;/upload&quot;) // MultipartFile是上传文件接口，对应保存临时文件 // 参数名要和前端name属性保持一致 public ModelAndView upload(@RequestParam(&quot;photo&quot;) MultipartFile photo) throws IOException { // 文件保存的路径 // String path=&quot;f:/upload/&quot;; // 文件使用原有名称命名 // String filename=photo.getOriginalFilename(); // 文件使用上传的时间命名 String filename=new SimpleDateFormat(&quot;yyyyMMddHHmmssSSS&quot;).format(new Date()); // 文件扩展名 String suffix= photo.getOriginalFilename().substring(photo.getOriginalFilename().lastIndexOf(&quot;.&quot;)); // 限制上传的文件类型 if(!suffix.equals(&quot;.jpg&quot;)){ throw new RuntimeException(&quot;图片格式错误&quot;); } // Spring 提供了一个文件操作类FileCopyUtils FileCopyUtils.copy(photo.getInputStream(),new FileOutputStream(path+filename+suffix)); return null; } }","categories":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}],"tags":[{"name":"web","slug":"web","permalink":"/tags/web/"},{"name":"Spring Boot","slug":"Spring-Boot","permalink":"/tags/Spring-Boot/"}],"keywords":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}]},{"title":"Spring Boot SpringMVC常用的设置上下文方式","slug":"spring-boot-context","date":"2019-07-25T10:16:01.000Z","updated":"2019-08-08T12:11:23.616Z","comments":true,"path":"2019/07/25/spring-boot-context/","link":"","permalink":"/2019/07/25/spring-boot-context/","excerpt":"","text":"在学习Spring Boot中，SpringMVC常用的设置上下文方式如下： 首先看一下前端booklist.html： &lt;thead&gt; &lt;tr&gt; &lt;th&gt;ID&lt;/th&gt; &lt;th&gt;书名&lt;/th&gt; &lt;th&gt;作者&lt;/th&gt; &lt;th&gt;价格&lt;/th&gt; &lt;th&gt;操作&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;tr th:each=”book : ${books}”&gt; &lt;td th:text=”${book.id}”&gt;&lt;/td&gt; &lt;td th:text=”${book.name}”&gt;&lt;/td&gt; &lt;td th:text=”${book.author}”&gt;&lt;/td&gt; &lt;td th:text=”${book.price}”&gt;&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; 1.ModelAndView 使用方法如下： @RequestMapping(“/book”) public ModelAndView queryAll(){ List&lt;Book&gt; books =bookDao.selectAll(); ModelAndView modelAndView =new ModelAndView(“booklist”); modelAndView.addObject(“books”,books); return modelAndView; } 1、高内聚低耦合原则。实质上上设计的函数尽量不带参数，便于不同系统间调用时更简单。 推荐使用ModelAndView， ModelAndView实质上是map，和web容器没有关系。 2.Model 使用方法如下： @RequestMapping(“/book”)public String queryAll(Model model){ List&lt;Book&gt; books =bookDao.selectAll(); model.addAttribute(“books” ,books); return “booklist”; } SpringMVC会自动创建Model对象，但是在一些特殊情况下需要手动创建对象。 3.HttpServletRequest 使用方法如下： @RequestMapping(“/book”) public String queryAll(HttpServletRequest request){ List&lt;Book&gt; books =bookDao.selectAll(); request.setAttribute(“books”,books); return “booklist”; } 4.WebRequest 使用方法如下： @RequestMapping(“/book”) public String queryAll(WebRequest webRequest){ List&lt;Book&gt; books =bookDao.selectAll(); webRequest.setAttribute(“books”,books,WebRequest.SCOPE_REQUEST); return “booklist”; } WebRequest和HttpServletRequest这两种方法 和WEB容器强耦合, 不利于 更换容器或者扩展。不建议这两种方式","categories":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}],"tags":[{"name":"web","slug":"web","permalink":"/tags/web/"},{"name":"Spring Boot","slug":"Spring-Boot","permalink":"/tags/Spring-Boot/"}],"keywords":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}]},{"title":"Spring Boot Thymeleaf模板引擎","slug":"spring-boot-thymeleaf","date":"2019-07-24T10:16:01.000Z","updated":"2019-08-08T12:11:10.455Z","comments":true,"path":"2019/07/24/spring-boot-thymeleaf/","link":"","permalink":"/2019/07/24/spring-boot-thymeleaf/","excerpt":"","text":"1.模板 引擎简介 ： 模板引擎将页面和数据进行分离，简化开发过程，主流模板引擎：Thymeleaf、&nbsp;FreeMarker、Velocity、Groovy、Mustache 、JSP 、Beetl Thymeleaf: 优点，主要集中在：模板即原型，前后端分离。缺点：模板必须符合xml规范，速度偏慢。适用于个人独立开发 小结：工作中FreeMarker用的较多，前瞻学习Beetl。现在前端框架例如Bootstrap、Vue较为流行。 2.Thymeleaf依赖引入 (1)在pom.xml 配置文件中添加以下代码引入thymeleaf: &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-thymeleaf&lt;/artifactId&gt; &lt;/dependency&gt; (2)在html中引入thymeleaf命名空间，如下所示： &lt;html xmlns:th=”http://www.thymeleaf.org&quot; &gt; 3.Thymeleaf 语法 1.常用语法简单介绍 #{} 主要读取常量,例如读取配置文件中的 数据${} 主要读取变量，程序中创建的，灵活改变的量@{} 主要和路径有关系，比如在th:href=”@{**}”中的使用 2.更多语法详请参考官方文档 4.Thymeleaf的使用： 1.前端 &lt;tr th:each=”book : ${books}”&gt; &lt;td th:text=”${book.id}”&gt;&lt;/td&gt; &lt;td th:text=”${book.name}”&gt;&lt;/td&gt; &lt;td th:text=”${book.author}”&gt;&lt;/td&gt; &lt;td th:text=”${book.price}”&gt;&lt;/td&gt; &lt;td&gt; &lt;a th:href=”@{‘/book/predit/‘+${book.id}}” &gt;&lt;button class=”btn btn-sm btn-primary”&gt;编辑&lt;/button&gt;&lt;/a&gt; &lt;a th:href=”@{‘/book/del/‘+${book.id}}” &gt;&lt;button class=”btn btn-sm btn-danger” &gt;删除&lt;/button&gt;&lt;/a&gt; &lt;/td&gt;&lt;/tr&gt; 2.后端 @Controllerpublic class bookController { @Autowired private BookDao bookDao; RendDao rendDao; @RequestMapping(“/book”) public String queryAll(Model model){ List&lt;Book&gt; books =bookDao.selectAll(); model.addAttribute(“books” ,books); return “booklist”; } booklist.html 在templates下，我只需在返回中输入”booklist” Thymeleaf会自动渲染出 booklist.html 。","categories":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}],"tags":[{"name":"web","slug":"web","permalink":"/tags/web/"},{"name":"Spring Boot","slug":"Spring-Boot","permalink":"/tags/Spring-Boot/"}],"keywords":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}]},{"title":"Spring Boot 日志配置","slug":"spring-boot-logs","date":"2019-07-23T10:16:01.000Z","updated":"2019-08-08T13:03:06.395Z","comments":true,"path":"2019/07/23/spring-boot-logs/","link":"","permalink":"/2019/07/23/spring-boot-logs/","excerpt":"","text":"1.日志文件 Spring Boot 日志级别：Debug-&gt;INFO-&gt;WARN-&gt;ERROR Spring Boot 默认日志级别：INFO 2.控制台输出级别控制 （1）application.properties 中配置：ROOT代表默认全局设置 logging.level.ROOT=INFO //默认输出INFO以上包括INFO级别的日志 （2）application.properties中配置： 单独控制包的日志输出级别 logging.level.org.apache=ERROR //只有EEEOR信息才会输出到控制台 3.将日志写到指定文件 （1）在 application.properties 设置日志文件目录： logging.file=F:/logs/document.log （2）使用logback.xml自定义日志文件输出 logback.xml和application.properties在同一个目录下 &amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt; &amp;lt;configuration scan=&quot;true&quot; scanPeriod=&quot;60 seconds&quot; debug=&quot;false&quot;&gt; &amp;lt;contextName&gt;projectName&amp;lt;/contextName&gt; &amp;lt;property name=&quot;contextName&quot; value=&quot;projectName&quot; /&gt; &amp;lt;property name=&quot;log_dir&quot; value=&quot;./logs/&quot; /&gt; &amp;lt;!--输出到控制台--&gt; &amp;lt;appender name=&quot;console&quot; class=&quot;ch.qos.logback.core.ConsoleAppender&quot;&gt; &amp;lt;!-- 级别过滤器。如果日志级别低于WARN，将被过滤掉。 ALL TRACE DEBUG INFO WARN ERROR--&gt; &amp;lt;filter class=&quot;ch.qos.logback.classic.filter.ThresholdFilter&quot;&gt; &amp;lt;level&gt;DEBUG&amp;lt;/level&gt; &amp;lt;/filter&gt; &amp;lt;encoder&gt; &amp;lt;pattern&gt;%d{yyyy-MM-dd HH:mm:ss.SSS} %-5level %msg - %file:%line%n&amp;lt;/pattern&gt; &amp;lt;charset&gt;UTF-8&amp;lt;/charset&gt; &amp;lt;/encoder&gt; &amp;lt;/appender&gt; &amp;lt;!-- 每天记录info级别日志文件 --&gt; &amp;lt;appender name=&quot;InfoRollingFileAppender&quot; class=&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;&gt; &amp;lt;Prudent&gt;true&amp;lt;/Prudent&gt; &amp;lt;layout class=&quot;ch.qos.logback.classic.PatternLayout&quot;&gt; &amp;lt;Pattern&gt;%d{yyyy-MM-dd HH:mm:ss} %-5level %msg - %file:%line%n&amp;lt;/Pattern&gt; &amp;lt;/layout&gt; &amp;lt;rollingPolicy class=&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;&gt; &amp;lt;FileNamePattern&gt;${log_dir}/${contextName}_info%d{yyyy-MM-dd}.log &amp;lt;/FileNamePattern&gt; &amp;lt;/rollingPolicy&gt; &amp;lt;!-- 级别过滤器。如果日志级别低于WARN，将被过滤掉。ALL TRACE DEBUG INFO WARN ERROR--&gt; &amp;lt;filter class=&quot;ch.qos.logback.classic.filter.ThresholdFilter&quot;&gt; &amp;lt;level&gt;INFO&amp;lt;/level&gt; &amp;lt;/filter&gt; &amp;lt;!-- 除了DEBUG级别的日志，其它什么级别的日志都不要 --&gt; &amp;lt;!-- &amp;lt;filter class=&quot;ch.qos.logback.classic.filter.LevelFilter&quot;&gt; &amp;lt;level&gt;DEBUG&amp;lt;/level&gt; &amp;lt;level&gt;INFO&amp;lt;/level&gt; &amp;lt;onMatch&gt;ACCEPT&amp;lt;/onMatch&gt; &amp;lt;onMismatch&gt;DENY &amp;lt;/onMismatch&gt; &amp;lt;/filter&gt; --&gt; &amp;lt;/appender&gt; &amp;lt;!-- 每天记录ERROR级别日志文件 --&gt; &amp;lt;appender name=&quot;ErrorRollingFileAppender&quot; class=&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;&gt; &amp;lt;Prudent&gt;true&amp;lt;/Prudent&gt; &amp;lt;layout class=&quot;ch.qos.logback.classic.PatternLayout&quot;&gt; &amp;lt;Pattern&gt;%d{yyyy-MM-dd HH:mm:ss} %-5level %msg - %file:%line%n&amp;lt;/Pattern&gt; &amp;lt;/layout&gt; &amp;lt;rollingPolicy class=&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;&gt; &amp;lt;FileNamePattern&gt;${log_dir}/${contextName}_error%d{yyyy-MM-dd}.log &amp;lt;/FileNamePattern&gt; &amp;lt;/rollingPolicy&gt; &amp;lt;!-- 级别过滤器。如果日志级别低于WARN，将被过滤掉。 --&gt; &amp;lt;filter class=&quot;ch.qos.logback.classic.filter.ThresholdFilter&quot;&gt; &amp;lt;level&gt;ERROR&amp;lt;/level&gt; &amp;lt;/filter&gt; &amp;lt;!-- 除了DEBUG级别的日志，其它什么级别的日志都不要 --&gt; &amp;lt;!-- &amp;lt;filter class=&quot;ch.qos.logback.classic.filter.LevelFilter&quot;&gt; &amp;lt;level&gt;DEBUG&amp;lt;/level&gt; &amp;lt;level&gt;INFO&amp;lt;/level&gt; &amp;lt;onMatch&gt;ACCEPT&amp;lt;/onMatch&gt; &amp;lt;onMismatch&gt;DENY &amp;lt;/onMismatch&gt; &amp;lt;/filter&gt; --&gt; &amp;lt;/appender&gt; &amp;lt;root&gt; &amp;lt;appender-ref ref=&quot;console&quot; /&gt; &amp;lt;appender-ref ref=&quot;InfoRollingFileAppender&quot; /&gt; &amp;lt;appender-ref ref=&quot;ErrorRollingFileAppender&quot; /&gt; &amp;lt;/root&gt; &amp;lt;/configuration&gt; 使用logback.xml，上面 properties 中日志配置将全部失效","categories":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}],"tags":[{"name":"web","slug":"web","permalink":"/tags/web/"},{"name":"Spring Boot","slug":"Spring-Boot","permalink":"/tags/Spring-Boot/"}],"keywords":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}]},{"title":"Hexo-Sakura安装Gitalk","slug":"gitalk","date":"2019-07-01T10:16:01.000Z","updated":"2019-08-08T10:05:52.020Z","comments":true,"path":"2019/07/01/gitalk/","link":"","permalink":"/2019/07/01/gitalk/","excerpt":"","text":"Gitalk Gitalk 是一款基于GitHub使用的评论插件，使用起来非常方便。最近Valine出了一些问题，无法正常使用，虽然官网给了修复的方法，但是我不想再使用Valine，于是便安装了Gitalk这款插件，下面给大家带来 Sakura主题安装gitalk的教程 申请 OAuth Apps首先登Github主页，点击你的头像依次点击Settings-&gt;Developer settings-&gt;OAuth Apps-&gt; new OAuth Apps将会到下面的界面： 里面几个参数介绍如下： Application name:应用名称，这个你自己随便写，合法就行 Homepage URL:这个填写你的博客地址例如：https://yremp.github.io Application description:应用描述随便填 Authorization callback URL:如果你绑定了个性域名一定要填写个性域名,例如：https://yremp.club 申请完成以后有两个重要参数Client ID、Client Secret后面会使用： 如下所示： 修改配置文件做完上面的准备工作接下来就是修改配置文件:在 \\themes\\Sakura 下找到 _config.yml 。打开，在最下方加入如下代码： gitalk: # 是否自动展开评论框 autoExpand: true # 应用编号 clientID: &#39;8972e4300aeaabe97cc0&#39; # 应用秘钥 clientSecret: &#39;988d6142b09dd52db79a2b832ba8f068df13a99a&#39; # issue仓库名 repo: &#39;yremp.github.io&#39; # Github名 owner: &#39;yremp&#39; # Github名 admin: [&#39;yremp&#39;] # Ensure uniqueness and length less than 50 id: location.pathname # Facebook-like distraction free mode distractionFreeMode: false 对照注释修改： clientID： 申请的应用ID clientSecret： 申请的应用密匙 repo： issue仓库名 owner： 你的github用户名 admin： 你的github用户名 修改布局文件接着，在 \\themes\\Sakura\\layout_partial 下找到comment.ejs将里面的代码替换为如下代码： &lt;% if ( post.comments) { %&gt; &lt;script src=&quot;https://cdn.jsdelivr.net/gh/yremp/yremp-js@1.1/gitalk.js&quot;&gt;&lt;/script&gt; &lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/gh/yremp/yremp-css@1.3/gitalk.css&quot;&gt; &lt;div id=&quot;gitalk-container&quot;&gt;&lt;/div&gt; &lt;script type=&quot;text/javascript&quot;&gt; var gitalk = new Gitalk({ clientID: &#39;&lt;%= theme.gitalk.clientID %&gt;&#39;, clientSecret: &#39;&lt;%= theme.gitalk.clientSecret %&gt;&#39;, id: window.location.pathname, repo: &#39;&lt;%= theme.gitalk.repo %&gt;&#39;, owner: &#39;&lt;%= theme.gitalk.owner %&gt;&#39;, admin: &#39;&lt;%= theme.gitalk.admin %&gt;&#39; }) gitalk.render(&#39;gitalk-container&#39;) &lt;/script&gt; &lt;% } %&gt; 里面的js以及css文件是我从官方找的并且放在我的github上面，你可以去找官方的链接下载放到自己github上面，也可以直接用我的。然后，在 \\themes\\Sakura\\layout_partial 下找到footer.ejs在里面加入评论区容器： &lt;div id=&quot;gitalk-container&quot;&gt;&lt;/div&gt; 位置合适就好，可以参考我的： 继续在这个文件里添加JS链接： &lt;script src=&quot;https://cdn.jsdelivr.net/gh/yremp/yremp-js@1.1/gitalk.js&quot;&gt;&lt;/script&gt; 位置可以参考我的： 最后，在 \\themes\\Sakura\\layout_partial 下找到head.ejs加入如下代码： &lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/gh/yremp/yremp-css@1.3/gitalk.css&quot;&gt; 可以参考我的： 完成接下来就是： hexo clean hexo g hexo d 大功告成，效果如下： 如果有什么问题，请到评论区留言。转载请标明作者和原文地址","categories":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}],"tags":[{"name":"web","slug":"web","permalink":"/tags/web/"}],"keywords":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}]},{"title":"Sakura新手使用手册","slug":"teach","date":"2019-05-26T14:16:01.000Z","updated":"2019-08-09T10:03:53.586Z","comments":true,"path":"2019/05/26/teach/","link":"","permalink":"/2019/05/26/teach/","excerpt":"","text":"有很多小伙伴使用Sakura这款主题却又不知到如何美化，到处找别人问很麻烦，而我当初也是花了很长时间去摸索，才了解了这款主题的一些具体设置。下面我就按照从主页到子页面，从顶部到页脚的顺序给你们介绍如何自定义这款主题。 1.本教程主要写给刚入门的小白，大佬随意。2.教程比较长，建议根据右边标题索引快速找到自己感兴趣的部分 一：顶部站点名字：这个是在 /themes/sakura/config.yml 这个配置文件中修改 //site name prefixName: 君の名は siteName: yremp url: https://yremp2.github.io/ 其中，URL是点击后跳转地址.由于我在 /themes/sakura/source/css/style.css下修改了样式表去掉了prefixName，所以图上是没有的大家如果想修改其相关的样式也可以去这个css文件中自定义,这个文件是主要的css文件，大部分的样式都是由这个文件定义的。 二：顶部导航栏这个在主题使用教程里面，作者好像已经是给出来了，大家可以仔细去阅读以下(当初我就是没有认真阅读爬了不少坑)这也是 /themes/sakura/config.yml 这个配置文件里面定义的 menus: 首页: { path: /, fa: fas fa-home fa-1x } 归档: { path: /archives, fa: far fa-folder-open, submenus: { 技术: {path: /categories/技术/, fa: fab fa-windows }, 生活: {path: /categories/生活/, fa: fa-book }, 资源: {path: /categories/资源/, fa: fa-cloud-download }, 随想: {path: /categories/随想/, fa: fa-commenting-o }, 转载: {path: /categories/转载/, fa: fas fa-clone } } } 清单: { path: javascript:;, fa: fas fa-tasks,submenus: { 书单: {path: /tags/悦读/, fa: fa-th-list faa-bounce }, 番组: {path: /bangumi/, fa: fa-film faa-vertical }, 歌单: {path: /music/, fa: fa-headphones }, 图集: {path: /tags/图集/, fa: fa-photo } } } 留言板: { path: /comment/, fa: fa-pencil-square-o faa-tada } 友人帐: { path: /links/, fa: fa-link faa-shake } 前面的path是网页路径，这个不建议修改，但可以修改。后面的如: fa: fas fa-home fa-1x 这个就是对应的图标设置,关于这个图标大家可以去fontawesome看教程以及选择自己喜欢的图标，导航栏下拉下拉菜单的图标修改和导航栏相同。 三：头像很多小伙伴拿到主题后第一时间肯定是修改这个头像，毕竟这个比较能代表自己嘛，那么这个头像配置在哪(⊙o⊙)?如果有经验的小伙伴肯定是自己就能找到，这个配置在： /themes/sakura/config.yml cdn: https://cdn.jsdelivr.net/gh/yremp/cdn@2.1.5 avatar: /img/custom/head.jpg 我这个是使用cdn后的路径，也可以修改为： avatar: https://cdn.jsdelivr.net/gh/yremp/cdn@2.1.5/img/custom/head.jpg 至于cdn：大家可以去看我的另一篇博客jsDeliver+github使用教程 四：社交栏 1.个性签名这个在 /themes/sakura/config.yml 里面，由如下代码定义 description: 南风过境，十里春风不如你！ 直接修改即可 2.内容没错仍然是 /themes/sakura/config.yml 这个文件，找到 #social url, img PC端配置 social: github: {url: https://github.com/yremp, img: /img/social/github.png} wangyiyun: {url: https://music.163.com/, img: /img/social/wangyiyun.png} zhihu: {url: https://www.zhihu.com/, img: /img/social/zhihu.png} qq: {url: /#, qrcode: /img/custom/qq.png, img: /img/social/qq.png} wechat: {url: /#, qrcode: /img/custom/wechat.png, img: /img/social/wechat.png} #social url, img 移动端配置 msocial: github: {url: https://github.com/yremp, fa: fa-github, color: 333} weibo: {url: https://weibo.com/, fa: fa-weibo, color: dd4b39} qq: {url: https://im.qq.com/news/, fa: fa-qq, color: 25c6fe} 前面URL对应点击后跳转地址，后面是图标路径，注意这个不是本地路径，是使用了cdn后的路径，上一栏 头像设置中有介绍。至于pc和移动端注释已经标示了，就不多作介绍。 3.社交栏整体样式在 /themes/sakura/source/css/style.css Ctrl+f 搜索 header-info，这就是这个地方对应的div的class名字就可以在代码中找到 .header-info { width: 63%; margin: auto; font-size: 16px; color: #eaeadf; background: rgba(255,255,255,.8); padding: 15px; margin-top: 22px; letter-spacing: 0; line-height: 30px; border-radius: 10px; box-sizing: initial; white-space: nowrap; } .header-info:before { content: &quot;&quot;; position: absolute; top: 127.5px; left: 50%; margin-left: -15px; border-width: 15px; border-style: solid; border-color: transparent transparent rgba(255,255,255,.8) transparent; } .header-info p { margin:0; color: #605f5f; font-family:&#39;Ubuntu&#39;,sans-serif; font-weight:700 } 这就是其对应的样式表内容，大家可以根据需要修改。(Chrome) Ctrl+Shift+C然后点击你想查看的部分就会给你提示对应的部分例如：对应关系已经标出来，大家可以用这个功能快速找到网页和css对应关系，方便进行修改 五：顶部图片和效果 1.顶部图片 /themes/sakura/config.yml 中找到如下代码： # 背景图片 根据喜好修改 bg: - https://cdn.jsdelivr.net/gh/yremp/cdn@2.1.5/img/cover/(1).jpg.webp - https://cdn.jsdelivr.net/gh/yremp/cdn@2.1.5/img/cover/(2).jpg.webp - https://cdn.jsdelivr.net/gh/yremp/cdn@2.1.5/img/cover/(3).jpg.webp - https://cdn.jsdelivr.net/gh/yremp/cdn@2.1.5/img/cover/(4).jpg.webp - https://cdn.jsdelivr.net/gh/yremp/cdn@2.1.5/img/cover/(5).jpg.webp - https://cdn.jsdelivr.net/gh/yremp/cdn@2.1.5/img/cover/(6).jpg.webp - https://cdn.jsdelivr.net/gh/yremp/cdn@2.1.5/img/cover/(8).jpg.webp 2.顶部图片效果我的顶部效果改为了无，个人不太喜欢。可根据需要修改在： /themes/sakura/config.yml 中找到如下代码： # 背景图片样式 空 原图效果 filter-dim 阴影 filter-grid 横条 filter-dot 点点 bgclass: 具体参数原作者在注释中已经标示 六：通知栏 /themes/sakura/config.yml 中找到如下代码： notice: 欢迎来到我的博客！ 直接修改内容即可 七：startdash 1.模块名字在 /themes/sakura/layout/_partial/startdash.ejs中有如下： &lt;div class=&quot;top-feature-row&quot;&gt; &lt;h1 class=&quot;fes-title&quot; style=&quot;font-family: &#39;Ubuntu&#39;, sans-serif;&quot;&gt; &lt;i class=&quot;fa fa-anchor&quot; aria-hidden=&quot;true&quot;&gt; &lt;/i&gt; startdash&lt;/h1&gt; &lt;% for (dash in theme.startdash) { %&gt; .... 将其中startdash改为你想要的即可； 2.内容设置 /themes/sakura/config.yml 中找到如下代码： # startdash url, title, desc img startdash: - {url: /theme-sakura/, title: Sakura, desc: 本站主题, img: /img/startdash/sakura.md.png} - {url: http://space.bilibili.com/381786734, title: Bilibili, desc: b站视频, img: /img/startdash/bilibili.jpg} - {url: /, title: 万事屋, desc: 技术服务, img: /img/startdash/wangshiwu.jpg} 注释也已经标示出其参数，根据参数修改即可。 八：Discovery /themes/sakura/layout/index.ejs中找到如下代码： &lt;h1 class=&quot;main-title&quot; style=&quot;font-family: &#39;Ubuntu&#39;, sans-serif;&quot;&gt; &lt;i class=&quot;fa fa-envira&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt; Discovery&lt;/h1&gt; &lt;%- partial(&#39;_partial/archive&#39;, {pagination: 2, index: true}) %&gt; &lt;!-- 首页默认取最最新文章集 --&gt; Discovery就是标题，直接修改即可 九：文章封面和内容；1.封面这个在在你写博客时，有photo属性，设置url即可 ，下面是示例： title: Sakura美化教程 author: hojun avatar: https://wx1.sinaimg.cn/large/006bYVyvgy1ftand2qurdj303c03cdfv.jpg authorLink: https://yremp.club authorAbout: authorDesc: categories: 技术 date: 2019-5-26 12:16:01 comments: true tags: - web keywords: Sakura主题自定义美化教程 description: Sakura美化教程 photos: https://static.2heng.xin/wp-content/uploads//2019/02/wallhaven-672007-1-1024x576.png --- photos 就是文章的封面 十：归档子页面这个相关的设置是在 /themes/sakura/language/zh-cn.yml找到如下代码： #category 技术: zh: 野生技术协会 en: Technical Communication img: https://cdn.jsdelivr.net/gh/yremp/cdn@2.1.5/img/cover/(1).jpg.webp 生活: zh: 生活 en: Live img: https://cdn.jsdelivr.net/gh/yremp/cdn@2.1.5/img/cover/(2).jpg.webp ...... 这就不用我解释，对比图片很容易看懂 十一：清单子页面1.悦读和图集，在 /themes/sakura/language/zh-cn.yml找到如下代码： #tag 悦读: img: https://cdn.jsdelivr.net/gh/yremp/cdn@2.1.5/img/cover/(6).jpg.webp 图集: img: https://cdn.jsdelivr.net/gh/yremp/cdn@2.1.5/img/cover/(5).jpg.webp web: img: https://cdn.jsdelivr.net/gh/yremp/resource@1.0/img/pic.jpg 对比图片进行修改 2.番组这个页面对应的配置是在 /source/bangumi/index.md中修改，其中代码如下： --- layout: bangumi title: bangumi comments: false date: 2019-02-10 21:32:48 keywords: description: bangumis: - img: http://pic.netbian.com/uploads/allimg/180413/121552-152359295246db.jpg title: 狐妖小红娘 status: 追番中 progress: 100 jp: 狐妖小红娘 time: 2019-05-24 SUN. desc: 白月初…… - img: http://pic.netbian.com/uploads/allimg/170605/130458-149663909840b3.jpg title: 名侦探柯南 status: 追番中 progress: 1000 jp: 名探偵コナン time: 2019-05-24 SUN. desc: 中生侦探工藤新一…… --- 对比图片修改内容即可，也可以增加其他内容。 3.歌单整个页面配置在 /source/music/index.md中：其代码如下： --- title: music date: 2018-12-20 23:14:28 keywords: 喜欢的音乐 description: comments: false photos: http://pic.netbian.com/uploads/allimg/170911/233802-15051442827782.jpg --- &lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=100% height=450 src=&quot;//music.163.com/outchain/player?type=0&amp;id=762797776&amp;auto=1&amp;height=430&quot;&gt;&lt;/iframe&gt; 前面是常规的信息配置没什么好说的，photos就是这个页面的顶部图片，在 &lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=100% height=450 src=&quot;//music.163.com/outchain/player?type=0&amp;id=762797776&amp;auto=1&amp;height=430&quot;&gt;&lt;/iframe&gt; 中需要改一下id，这个id就是网易云音乐歌单id，怎么获取如下图：登录网页版网易云音乐，打开歌单，在地址栏中可以看到 https://music.163.com/#/playlist?id=762797776 其中id后面的数字复制，粘贴到代码里面的id后面就可以显示自己的歌单了。 十二：友情链接相关配置(留言板/source/comment/index.md就一个背景修改就不出教程了，为了给下面其他教程留空间) 1.内容配置友情链接内容配置具体在 /source/link/index.md代码如下 ...... photos: https://cdn.jsdelivr.net/gh/honjun/cdn@1.4/img/banner/links.jpg //背景图片 links: - group: 小伙伴们 desc: 欢迎交换友链 ꉂ(ˊᗜˋ) items: - url: https://yremp.github.io img: https://cloud.moezx.cc/Picture/svg/landscape/fields.svg name: 好友1 desc: 点击查看 ...... --- 根据实际情况修改其中的内容 2.界面背景及布局界面背景及布局主要在/themes/sakura/layout/links.ejs代码如下： ........ &lt;p&gt; 欢迎交换友链qaq ꉂ(ˊᗜˋ)&lt;/p&gt; &lt;p&gt; 请留言告诉我你的： &lt;br&gt; 1、名字 &lt;br&gt; 2、一句话介绍（熟人我会亲自帮写的） &lt;br&gt; 3、主页地址 &lt;br&gt; 4、头像（HTTPS*，可在评论区上传） &lt;/p&gt; ........ 对照图片根据需要修改 十三：左下角播放器1.设置为自己的歌单 ，和清单里的歌单一样要先拿到网易歌单id，怎么获取上面清单子页面里有相关介绍；然后在 /themes/sakura/config.yml 中找到如下代码： player: id: 762797776 server: netease type: playlist fixed: true autoplay: false loop: all order: random preload: none volume: 0.7 mutex: true 修改为自己的网易云歌单id即可 十四：切换背景严格意义上来说这个并不算增加，算是恢复，作者在移植这款主题时，只删除了对应的ejs布局文件，并没有删除style.css和js里面相关代码，想要加上这个功能只需要把原作者的相关的div等加上就行。大佬可自行到白猫（原作者）网站查看源代码加上就行。如果是小白或者比较懒得朋友那你只需要按以下几个步骤即可实现这个功能：1:找到 /themes/sakura/layout/layout.ejs在里面加入两行代码代码位置和内容如下（注释下面那两行）： ...... ...... ...... &lt;!-- 下面两行为了实现换肤功能 --&gt; &lt;%- partial(&#39;_partial/setdisplay&#39;) %&gt; &lt;%- partial(&#39;_partial/set&#39;, null, {cache: !config.relative_link}) %&gt; &lt;%- partial(&#39;_partial/mheader&#39;, null, {cache: !config.relative_link}) %&gt; &lt;%- partial(&#39;_partial/aplayer&#39;, null, {cache: !config.relative_link}) %&gt; &lt;/body&gt; &lt;/html&gt; 2: 在/themes/sakura/layout/_partial文件夹下面依次新建set.ejs和setdisplay.ejs,其内容分别如下： set.ejs &lt;div class=&quot;changeSkin-gear no-select&quot;&gt; &lt;div class=&quot;keys&quot; id=&quot;setbtn&quot;&gt; &lt;span id=&quot;open-skinMenu&quot;&gt; 切换主题 | SCHEME TOOL &amp;nbsp;&lt;i class=&quot;iconfont icon-gear inline-block rotating&quot;&gt;&lt;/i&gt; &lt;/span&gt;&lt;/div&gt; &lt;/div&gt; setdisplay.ejs &lt;div class=&quot;skin-menu no-select&quot; id=&quot;mainskin&quot; style=&quot;position: fixed&quot;&gt; &lt;div class=&quot;theme-controls row-container&quot;&gt; &lt;ul class=&quot;menu-list&quot;&gt; &lt;li id=&quot;white-bg&quot;&gt; &lt;i class=&quot;fa fa-television&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt;&lt;/li&gt; &lt;li id=&quot;sakura-bg&quot;&gt; &lt;i class=&quot;iconfont icon-sakura&quot;&gt;&lt;/i&gt;&lt;/li&gt; &lt;li id=&quot;gribs-bg&quot;&gt; &lt;i class=&quot;fa fa-slack&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt;&lt;/li&gt; &lt;li id=&quot;KAdots-bg&quot;&gt; &lt;i class=&quot;iconfont icon-dots&quot;&gt;&lt;/i&gt;&lt;/li&gt; &lt;li id=&quot;totem-bg&quot;&gt; &lt;i class=&quot;fa fa-optin-monster&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt;&lt;/li&gt; &lt;li id=&quot;pixiv-bg&quot;&gt; &lt;i class=&quot;iconfont icon-pixiv&quot;&gt;&lt;/i&gt;&lt;/li&gt; &lt;li id=&quot;bing-bg&quot;&gt; &lt;i class=&quot;iconfont icon-bing&quot;&gt;&lt;/i&gt;&lt;/li&gt; &lt;li id=&quot;dark-bg&quot;&gt; &lt;i class=&quot;fa fa-moon-o&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;canvas id=&quot;night-mode-cover&quot;&gt;&lt;/canvas&gt; 十五：评论不在白名单问题首先，和评论相关的配置在： /themes/sakura/config.yml 具体代码： # Valine valine: true v_appId: Qtrxu5pUbpfjbn2CpMH1jetC-gzGzoHsz v_appKey: 72NpGpYhuAYcKyDhYSOFE1b2 这里面的id和Key是需要修改的，因为这是我的v_appId和v_appKey，你需要去注册。具体的请自行百度。只提醒一点，注册完以后 ，申请app以后，要设置 白名单。 如果发现教程有什么问题或者你有什么问题，请到评论区留言。转载请标明作者和原文地址","categories":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}],"tags":[{"name":"web","slug":"web","permalink":"/tags/web/"}],"keywords":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}]},{"title":"jsDeliver+github使用教程","slug":"jsDeliver+github","date":"2019-05-24T13:43:06.966Z","updated":"2019-07-22T05:55:17.560Z","comments":true,"path":"2019/05/24/jsDeliver+github/","link":"","permalink":"/2019/05/24/jsDeliver+github/","excerpt":"","text":"前言:国内加载github的资源比较慢，需要使用CDN加速来优化网站打开速度，于是使用jsDeliver+github搭建免费的cdn。jsDelivr 是一个免费开源的 CDN 解决方案，用于帮助开发者和站长。包含 JavaScript 库、jQuery 插件、CSS 框架、字体等等 Web 上常用的静态资源。 写给小白的,懂的前面可以略过npmNPM是JavaScript的包管理器，也是世界上最大的软件注册中心。发现可重用代码的包——并以强大的新方式组装它们。每星期大约有 30 亿次的下载量，包含超过 600000 个 包（package（即，代码模块）。来自各大洲的开源软件开发者使用 npm 互相分享和借鉴。包的结构使您能够轻松跟踪依赖项和版本。所以jsDeliver+npm就是把npm上的包当做cdn的存储。使用教程： // load any project hosted on npm // 加载以NPM为存储的任何项目 https://cdn.jsdelivr.net/npm/package@version/file // load jQuery v3.2.1 // 比如加载Jquery3.2.1 https://cdn.jsdelivr.net/npm/jquery@3.2.1/dist/jquery.min.js // use a version range instead of a specific version //使用版本范围而不是特定版本 https://cdn.jsdelivr.net/npm/jquery@3.2/dist/jquery.min.js https://cdn.jsdelivr.net/npm/jquery@3/dist/jquery.min.js // omit the version completely to get the latest one //完全忽略版本以获取最新版本，不建议使用 https://cdn.jsdelivr.net/npm/jquery/dist/jquery.min.js 略...... GithubgitHub是一个面向开源及私有软件项目的托管平台，因为只支持git 作为唯一的版本库格式进行托管，故名gitHub。jsDeliver+Github使用教程： // load any GitHub release, commit, or branch // 加载任何Github发布、提交或分支 https://cdn.jsdelivr.net/gh/user/repo@version/file 略...... WordPressWordPress是一款个人博客系统，并逐步演化成一款内容管理系统软件，它是使用PHP语言和MySQL数据库开发的。用户可以在支持 PHP 和 MySQL数据库的服务器上使用自己的博客。jsDeliver+WordPress使用教程： // load any plugin from the WordPress.org plugins SVN repo // 从WordPress.org等SVN仓库加载任何插件 https://cdn.jsdelivr.net/wp/plugins/project/tags/version/file 略...... 第一步：新建github仓库(我已经有这个仓库，so…这不是重点)接着在本地电脑克隆上图仓库（前提配置好本地git环境和ssh）命令如下： cd 某个目录下 git clone git@github.com:你的用户名/cdn.git 第二步：上传需要的资源复制需要的静态资源到本地git仓库中，提交到github仓库上。命令如下： cd 到git仓库目录下 // 查看状态 git status // 添加所以改动 git add . // 提交 git commit -m &#39;第一次提交&#39; // 推送至远程仓库 git push （注：jsDeliver不支持加载超过20M的资源，所以一些视频最好压缩到20M以下） 第三步：发布仓库 点击release发布 发布版本号1.0（自定义） 第四步：通过jsDeliver引用资源使用方法： https://cdn.jsdelivr.net/gh/你的用户名/你的仓库名@发布的版本号/文件路径 比如： //加载js https://cdn.jsdelivr.net/gh/yremp/cdn@1.0/js/jquery.js //加载图片 https://cdn.jsdelivr.net/gh/yremp/cdn@1.0/images/hb.png 重点：这个链接相当于一个直链，使用和直链一样，如下图： 总的来说，直链怎么用，这个链接怎么用 尊重原创，转载自hojun的文章并做修改。 点击查看原文. 希望这篇文章能给你带来知识和乐趣，喜欢博主的文章可以留言哦","categories":[{"name":"转载","slug":"转载","permalink":"/categories/转载/"}],"tags":[{"name":"web","slug":"web","permalink":"/tags/web/"}],"keywords":[{"name":"转载","slug":"转载","permalink":"/categories/转载/"}]},{"title":"Hexo-Theme-Sakura","slug":"Hexo-Theme-Sakura","date":"2019-05-24T01:21:50.016Z","updated":"2019-07-22T05:55:38.845Z","comments":true,"path":"2019/05/24/Hexo-Theme-Sakura/","link":"","permalink":"/2019/05/24/Hexo-Theme-Sakura/","excerpt":"","text":"hexo-theme-sakura主题 English document 基于WordPress主题Sakura修改成Hexo的主题。 demo预览 正在开发中…… 交流群若你是使用者，加群QQ: 801511924 若你是创作者，加群QQ: 194472590 主题特性 首页大屏视频 首页随机封面 图片懒加载 valine评论 fancy-box相册 pjax支持，音乐不间断 aplayer音乐播放器 多级导航菜单（按现在大部分hexo主题来说，这也算是个特性了） 赞赏作者如果喜欢hexo-theme-sakura主题，可以考虑资助一下哦~非常感激！ paypal | Alipay 支付宝 | WeChat Pay 微信支付 未完善的使用教程那啥？老实说我目前也不是很有条理233333333~ 1、主题下载安装hexo-theme-sakura建议下载压缩包格式，因为除了主题内容还有些source的配置对新手来说比较太麻烦，直接下载解压就省去这些麻烦咯。 下载好后解压到博客根目录（不是主题目录哦，重复的选择替换）。接着在命令行（cmd、bash）运行npm i安装依赖。 2、主题配置博客根目录下的_config配置站点 # Site title: 你的站点名 subtitle: description: 站点简介 keywords: author: 作者名 language: zh-cn timezone: 部署 deploy: type: git repo: github: 你的github仓库地址 # coding: 你的coding仓库地址 branch: master 备份 （使用hexo b发布备份到远程仓库） backup: type: git message: backup my blog of https://honjun.github.io/ repository: # 你的github仓库地址,备份分支名 （建议新建backup分支） github: https://github.com/honjun/honjun.github.io.git,backup # coding: https://git.coding.net/hojun/hojun.git,backup 主题目录下的_config配置其中标明【改】的是需要修改部门，标明【选】是可改可不改，标明【非】是不用改的部分 # site name # 站点名 【改】 prefixName: さくら荘その siteName: hojun # favicon and site master avatar # 站点的favicon和头像 输入图片路径（下面的配置是都是cdn的相对路径，没有cdn请填写完整路径，建议使用jsdeliver搭建一个cdn啦，先去下载我的cdn替换下图片就行了，简单方便~）【改】 favicon: /images/favicon.ico avatar: /img/custom/avatar.jpg # 站点url 【改】 url: https://sakura.hojun.cn # 站点介绍（或者说是个人签名）【改】 description: Live your life with passion! With some drive! # 站点cdn，没有就为空 【改】 若是cdn为空，一些图片地址就要填完整地址了，比如之前avatar就要填https://cdn.jsdelivr.net/gh/honjun/cdn@1.6/img/custom/avatar.jpg cdn: https://cdn.jsdelivr.net/gh/honjun/cdn@1.6 # 开启pjax 【选】 pjax: 1 # 站点首页的公告信息 【改】 notice: hexo-Sakura主题已经开源，目前正在开发中... # 懒加载的加载中图片 【选】 lazyloadImg: https://cdn.jsdelivr.net/gh/honjun/cdn@1.6/img/loader/orange.progress-bar-stripe-loader.svg # 站点菜单配置 【选】 menus: 首页: { path: /, fa: fa-fort-awesome faa-shake } 归档: { path: /archives, fa: fa-archive faa-shake, submenus: { 技术: {path: /categories/技术/, fa: fa-code }, 生活: {path: /categories/生活/, fa: fa-file-text-o }, 资源: {path: /categories/资源/, fa: fa-cloud-download }, 随想: {path: /categories/随想/, fa: fa-commenting-o }, 转载: {path: /categories/转载/, fa: fa-book } } } 清单: { path: javascript:;, fa: fa-list-ul faa-vertical, submenus: { 书单: {path: /tags/悦读/, fa: fa-th-list faa-bounce }, 番组: {path: /bangumi/, fa: fa-film faa-vertical }, 歌单: {path: /music/, fa: fa-headphones }, 图集: {path: /tags/图集/, fa: fa-photo } } } 留言板: { path: /comment/, fa: fa-pencil-square-o faa-tada } 友人帐: { path: /links/, fa: fa-link faa-shake } 赞赏: { path: /donate/, fa: fa-heart faa-pulse } 关于: { path: /, fa: fa-leaf faa-wrench , submenus: { 我？: {path: /about/, fa: fa-meetup}, 主题: {path: /theme-sakura/, fa: iconfont icon-sakura }, Lab: {path: /lab/, fa: fa-cogs }, } } 客户端: { path: /client/, fa: fa-android faa-vertical } RSS: { path: /atom.xml, fa: fa-rss faa-pulse } # Home page sort type: -1: newer first，1: older first. 【非】 homePageSortType: -1 # Home page article shown number) 【非】 homeArticleShown: 10 # 背景图片 【选】 bgn: 8 # startdash面板 url, title, desc img 【改】 startdash: - {url: /theme-sakura/, title: Sakura, desc: 本站 hexo 主题, img: /img/startdash/sakura.md.png} - {url: http://space.bilibili.com/271849279, title: Bilibili, desc: 博主的b站视频, img: /img/startdash/bilibili.jpg} - {url: /, title: hojun的万事屋, desc: 技术服务, img: /img/startdash/wangshiwu.jpg} # your site build time or founded date # 你的站点建立日期 【改】 siteBuildingTime: 07/17/2018 # 社交按钮(social) url, img PC端配置 【改】 social: github: {url: http://github.com/honjun, img: /img/social/github.png} sina: {url: http://weibo.com/mashirozx?is_all=1, img: /img/social/sina.png} wangyiyun: {url: http://weibo.com/mashirozx?is_all=1, img: /img/social/wangyiyun.png} zhihu: {url: http://weibo.com/mashirozx?is_all=1, img: /img/social/zhihu.png} email: {url: http://weibo.com/mashirozx?is_all=1, img: /img/social/email.svg} wechat: {url: /#, qrcode: /img/custom/wechat.jpg, img: /img/social/wechat.png} # 社交按钮(msocial) url, img 移动端配置 【改】 msocial: github: {url: http://github.com/honjun, fa: fa-github, color: 333} weibo: {url: http://weibo.com/mashirozx?is_all=1, fa: fa-weibo, color: dd4b39} qq: {url: https://wpa.qq.com/msgrd?v=3&amp;uin=954655431&amp;site=qq&amp;menu=yes, fa: fa-qq, color: 25c6fe} # 赞赏二维码（其中wechatSQ是赞赏单页面的赞赏码图片）【改】 donate: alipay: /img/custom/donate/AliPayQR.jpg wechat: /img/custom/donate/WeChanQR.jpg wechatSQ: /img/custom/donate/WeChanSQ.jpg # 首页视频地址为https://cdn.jsdelivr.net/gh/honjun/hojun@1.2/Unbroken.mp4，配置如下 【改】 movies: url: https://cdn.jsdelivr.net/gh/honjun/hojun@1.2 # 多个视频用逗号隔开，随机获取。支持的格式目前已知MP4,Flv。其他的可以试下，不保证有用 name: Unbroken.mp4 # 左下角aplayer播放器配置 主要改id和server这两项，修改详见[aplayer文档] 【改】 aplayer: id: 2660651585 server: netease type: playlist fixed: true mini: false autoplay: false loop: all order: random preload: auto volume: 0.7 mutex: true # Valine评论配置【改】 valine: true v_appId: GyC3NzMvd0hT9Yyd2hYIC0MN-gzGzoHsz v_appKey: mgOpfzbkHYqU92CV4IDlAUHQ 分类页和标签页配置分类页 标签页 配置项在\\themes\\Sakura\\languages\\zh-cn.yml里。新增一个分类或标签最好加下哦，当然嫌麻烦可以直接使用一张默认图片（可以改主题或者直接把404图片替换下，征求下意见要不要给这个在配置文件中加个开关，可以issue或群里提出来），现在是没设置的话会使用那种倒立小狗404哦。 #category # 按分类名创建 技术: #中文标题 zh: 野生技术协会 # 英文标题 en: Geek – Only for Love # 封面图片 img: https://cdn.jsdelivr.net/gh/honjun/cdn@1.6/img/banner/coding.jpg 生活: zh: 生活 en: live img: https://cdn.jsdelivr.net/gh/honjun/cdn@1.6/img/banner/writing.jpg #tag # 标签名即是标题 悦读: # 封面图片 img: https://cdn.jsdelivr.net/gh/honjun/cdn@1.6/img/banner/reading.jpg 单页面封面配置如留言板页面页面，位于source下的comment下，打开index.md如下： --- title: comment date: 2018-12-20 23:13:48 keywords: 留言板 description: comments: true # 在这里配置单页面头部图片，自定义替换哦~ photos: https://cdn.jsdelivr.net/gh/honjun/cdn@1.4/img/banner/comment.jpg --- 单页面配置番组计划页 （请直接在下载后的文件中改，下面的添加了注释可能会有些影响） --- layout: bangumi title: bangumi comments: false date: 2019-02-10 21:32:48 keywords: description: bangumis: # 番组图片 - img: https://lain.bgm.tv/pic/cover/l/0e/1e/218971_2y351.jpg # 番组名 title: 朝花夕誓——于离别之朝束起约定之花 # 追番状态 （追番ing/已追完） status: 已追完 # 追番进度 progress: 100 # 番剧日文名称 jp: さよならの朝に約束の花をかざろう # 放送时间 time: 放送时间: 2018-02-24 SUN. # 番剧介绍 desc: 住在远离尘嚣的土地，一边将每天的事情编织成名为希比欧的布，一边静静生活的伊欧夫人民。在15岁左右外表就停止成长，拥有数百年寿命的他们，被称为“离别的一族”，并被视为活着的传说。没有双亲的伊欧夫少女玛奇亚，过着被伙伴包围的平稳日子，却总感觉“孤身一人”。他们的这种日常，一瞬间就崩溃消失。追求伊欧夫的长寿之血，梅萨蒂军乘坐着名为雷纳特的古代兽发动了进攻。在绝望与混乱之中，伊欧夫的第一美女蕾莉亚被梅萨蒂带走，而玛奇亚暗恋的少年克里姆也失踪了。玛奇亚虽然总算逃脱了，却失去了伙伴和归去之地……。 - img: https://lain.bgm.tv/pic/cover/l/0e/1e/218971_2y351.jpg title: 朝花夕誓——于离别之朝束起约定之花 status: 已追完 progress: 50 jp: さよならの朝に約束の花をかざろう time: 放送时间: 2018-02-24 SUN. desc: 住在远离尘嚣的土地，一边将每天的事情编织成名为希比欧的布，一边静静生活的伊欧夫人民。在15岁左右外表就停止成长，拥有数百年寿命的他们，被称为“离别的一族”，并被视为活着的传说。没有双亲的伊欧夫少女玛奇亚，过着被伙伴包围的平稳日子，却总感觉“孤身一人”。他们的这种日常，一瞬间就崩溃消失。追求伊欧夫的长寿之血，梅萨蒂军乘坐着名为雷纳特的古代兽发动了进攻。在绝望与混乱之中，伊欧夫的第一美女蕾莉亚被梅萨蒂带走，而玛奇亚暗恋的少年克里姆也失踪了。玛奇亚虽然总算逃脱了，却失去了伙伴和归去之地……。 --- 友链页 （请直接在下载后的文件中改，下面的添加了注释可能会有些影响） --- layout: links title: links # 创建日期，可以改下 date: 2018-12-19 23:11:06 # 图片上的标题，自定义修改 keywords: 友人帐 description: # true/false 开启/关闭评论 comments: true # 页面头部图片，自定义修改 photos: https://cdn.jsdelivr.net/gh/honjun/cdn@1.4/img/banner/links.jpg # 友链配置 links: # 类型分组 - group: 个人项目 # 类型简介 desc: 充分说明这家伙是条咸鱼 &lt; (￣︶￣)&gt; items: # 友链链接 - url: https://shino.cc/fgvf # 友链头像 img: https://cloud.moezx.cc/Picture/svg/landscape/fields.svg # 友链站点名 name: Google # 友链介绍 下面雷同 desc: Google 镜像 - url: https://shino.cc/fgvf img: https://cloud.moezx.cc/Picture/svg/landscape/fields.svg name: Google desc: Google 镜像 # 类型分组... - group: 小伙伴们 desc: 欢迎交换友链 ꉂ(ˊᗜˋ) items: - url: https://shino.cc/fgvf img: https://cloud.moezx.cc/Picture/svg/landscape/fields.svg name: Google desc: Google 镜像 - url: https://shino.cc/fgvf img: https://cloud.moezx.cc/Picture/svg/landscape/fields.svg name: Google desc: Google 镜像 --- 写文章配置主题集成了个人插件hexo-tag-bili和hexo-tag-fancybox_img。其中hexo-tag-bili用来在文章或单页面中插入B站外链视频，使用语法如下： {% bili video_id [page] %} 详细使用教程详见hexo-tag-bili。 hexo-tag-fancybox_img用来在文章或单页面中图片，使用语法如下： {% fb_img src [caption] %} 详细使用教程详见hexo-tag-fancybox_img 还有啥，一时想不起来……To be continued…","categories":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}],"tags":[{"name":"web","slug":"web","permalink":"/tags/web/"},{"name":"悦读","slug":"悦读","permalink":"/tags/悦读/"}],"keywords":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}]}]}